check1(__int64 a1, int a2, int a3)
{
  int v4,i; v4 = 0;
  for ( i = 0; i < a2; ++i )
    v4 += *(char *)(i + a1);
  return v4 % a3 == 0;
}

check2(__int64 a1, int a2, int a3)
{
  int i;
  for ( i = 0; i < a2; ++i )
  {
    if ( (char)(*(_BYTE *)(i + a1) ^ 0x22) != a3 * i + 65 )
      return 0LL;
  }
  return 1LL;
}

check3(__int64 a1, int a2)
{
  unsigned int v3; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  v3 = 0;
  for ( i = 0; i < a2; ++i )
    v3 += *(char *)(i + a1);
  return check4(v3, 2LL);
}

check4(int a1, int a2)
{
  if ( a1 == 1 )
    return 0LL;
  if ( a1 < a2 * a2 )
    return 1LL;
  if ( a1 % a2 )
    return check4((unsigned int)a1, (unsigned int)(a2 + 1));
  return 0LL;
}

int __cdecl main(int argc, const char **argv, const char **envp){

char s[3]; // [rsp+10h] [rbp-30h]   -> menyesuaikan pointernya dengan ukurannya
char v5[6]; // [rsp+12h] [rbp-2Eh]  ->
char v6[7]; // [rsp+19h] [rbp-27h]  ->
unsigned __int64 v7; // [rsp+38h] [rbp-8h]
  if ( strlen(&s) != 16 )
  if ( !(unsigned int)check1(&s, 2LL, 5LL)) -> 	(s[0]+s[1])% 5 ==0
  if ( !(unsigned int)check2(v5, 3LL, 2LL) )		(v5[0]^0x22=65 ;v5[1]^0x22=67 ;v5[2]^0x22=69)
  if ( !(unsigned int)check1(&v5[3], 4LL, 7LL)) -> 	(v5[3]+v5[4]+v5[5]+v5[6]%7==0)
  if ( !(unsigned int)check3(v6, 3LL)) -> 		(v6[0]+v6[1]+v6[2] == prima )
  if ( !(unsigned int)check2(&v6[3], 4LL, 3LL) ) -> 	(v6[3]^0x22=65 ;v6[4]^0x22=68 ;v6[5]^0x22=71;v6[6]^0x22=74)
}
s[0] s[1] s[2] s[3] s[4] s[5] s[6] s[7] s[8] s[9] s[10] s[11] s[12] s[13] s[14] s[15]
A     A    c    a    g    a    b    b    c    P     P     o     c     f     e     h
inputan : AAcagabbcPPocfeh


